package Model;

import Model.Part;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

/**
 * The <code>Product</code> class defines <code>Product</code> objects. These are similar to <code>Part</code> objects,
 * however, <code>Product</code> objects typically have <code>Part</code> objects associated with them. This is to imply
 * that the <code>Product</code> objects are made up of (or contain) those associated <code>Part</code> objects.
 */
public class Product {
    /**
     * This <code>ObservableList</code> contains the <code>Part</code> objects that are associated with this <code>Product</code>.
     */
    private ObservableList<Part> associatedParts = FXCollections.observableArrayList();
    /**
     * This is the unique <code>id</code> of the <code>Product</code>.
     */
    private int id;
    /**
     * This is the <code>name</code> of the <code>Product</code>.
     */
    private String name;
    /**
     * This is the <code>price</code> of the <code>Product</code>.
     */
    private double price;
    /**
     * This is the current <code>stock</code> of the <code>Product</code>.
     */
    private int stock;
    /**
     * This is the minimum amount of stock that this <code>Product</code> is allowed to be.
     */
    private int min;
    /**
     * This is the maximum amount of stock that this <code>Product</code> is allowed to be.
     */
    private int max;

    /**
     * This is the standard constructor for the <code>Product</code> class. Nothing fancy here, just creates a new
     * instance of a <code>Product</code>.
     *
     * @param id    The unique id. This is auto-generated, never user-created.
     * @param name  the name of the <code>Product</code>
     * @param price the price of the <code>Product</code>
     * @param stock the current stock of the <code>Product</code>
     * @param min   The minimum stock allowed of the <code>Product</code>.
     * @param max   The maximum stock allowed of the <code>Product</code>
     */
    public Product(int id, String name, double price, int stock, int min, int max){
        this.id=id;
        this.name=name;
        this.price=price;
        this.stock=stock;
        this.min=min;
        this.max=max;
    }

    /**
     * Sets the <code>id</code> of this <code>Product</code>.
     *
     * @param id    This id is unique and always auto-generated by the application.
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Sets the <code>name</code> of this <code>Product</code>.
     *
     * @param name  the name to assign this <code>Product</code>
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Sets the <code>price</code> of this <code>Product</code>. When creating or modifying a <code>Product</code> object,
     * it cannot be lower than the sum of its associated <code>Part</code> objects.
     *
     * @param price the price to be assigned to this <code>Product</code>
     */
    public void setPrice(double price) {
        this.price = price;
    }

    /**
     * Sets the current <code>stock</code> of this <code>Product</code>. Cannot be higher than its <code>max</code>, nor
     * lower than its <code>min</code>.
     *
     * @param stock the current stock of this <code>Product</code>
     */
    public void setStock(int stock) {
        this.stock = stock;
    }

    /**
     * Sets the minimum amount of <code>stock</code> this <code>Product</code> can be. The <code>stock</code> cannot be
     * lower than this number.
     *
     * @param min   sets the lowest allowed amount of <code>stock</code>
     */
    public void setMin(int min) {
        this.min = min;
    }

    /**
     * Sets the maximum amount of <code>stock</code> this <code>Product</code> can be. The <code>stock</code> cannot be
     * higher than this number.
     *
     * @param max   sets the higher allowed amount of <code>stock</code>
     */
    public void setMax(int max) {
        this.max = max;
    }

    /**
     * Fetches the auto-generated <code>id</code> and returns it as an <code>int</code>.
     *
     * @return  the <code>id</code> as an <code>int</code>
     */
    public int getId() {
        return this.id;
    }

    /**
     * Fetches the user-created <code>name</code> and returns it as a <code>String</code>.
     *
     * @return  the <code>name</code> as a <code>String</code>
     */
    public String getName() {
        return this.name;
    }

    /**
     * Fetches the user-set <code>price</code> and returns it as a <code>double</code>.
     *
     * @return the <code>price</code> as a <code>double</code>
     */
    public double getPrice() {
        return this.price;
    }

    /**
     * Fetches the user-set <code>stock</code> and returns it as an <code>int</code>.
     *
     * @return  the <code>stock</code> as an <code>int</code>
     */
    public int getStock() {
        return this.stock;
    }

    /**
     * Fetches the user-set minimum allowed stock and returns it as an <code>int</code>.
     *
     * @return  the minimum stock allowed as an <code>int</code>
     */
    public int getMin() {
        return this.min;
    }

    /**
     * Fetches the user-set maximum allowed stock and returns it as an <code>int</code>.
     *
     * @return  the maximum stock allowed as an <code>int</code>
     */
    public int getMax() {
        return this.max;
    }

    /**
     * Adds a <code>Part</code> object to the <code>associatedParts</code> <code>ObservableList</code>. This ties a
     * <code>Part</code> to this <code>Product</code> adds its value to the inherent minimum cost of this
     * <code>Product</code>, as the <code>price</code> of this <code>Product</code> cannot be lower than the some of
     * its associated <code>Part</code> objects.
     *
     * @param part  the <code>Part</code> to be associated to this <code>Product</code>
     */
    public void addAssociatedPart(Part part){
        associatedParts.add(part);
    }

    /**
     * Removes the <code>Part</code> passed to this method as a parameter from this <code>Product</code> object's
     * <code>associatedParts</code> <code>ObservableList</code>. If no <code>Part</code> within the list matches the
     * passed <code>Part</code> object, then no <code>Part</code> is removed from the list. A <code>boolean</code>
     * is returned that is only <code>True</code> when the deletion is successful. This allows this method to tell
     * the caller of this method whether or not the deletion was successful if such activity is desired.
     *
     * @param selectedAssociatedPart    the <code>Part</code> to be removed from this <code>Product</code> object's
     *                                  <code>associatedParts</code> <code>ObservableList</code>
     * @return                          A boolean which only returns <code>True</code> if the deletion is successful.
     */
    public boolean deleteAssociatedPart(Part selectedAssociatedPart){
        if(!associatedParts.isEmpty()){
            for(Part part : associatedParts){
                if(part.getId() == selectedAssociatedPart.getId()){
                    associatedParts.remove(part);
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Returns an <code>ObservableList</code> populated with this <code>Product</code> objects' associated <code>Part</code>
     * objects. If there are no associated <code>Part</code> objects, this method returns an empty list.
     *
     * @return  An <code>ObservableList</code> of this <code>Product</code> objects' associated <code>Part</code> objects
     */
    public ObservableList<Part> getAllAssociatedParts(){
        return associatedParts;
    }

}
